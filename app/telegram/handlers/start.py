import time

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from app import settings
from app.dal import UsersDAL, MessagesDAL
from app.models import MessageModel, MessageType, User
from app.settings import Settings

from aiogram.fsm.state import StatesGroup, State

from app.telegram.handlers.analysis import AnalysisScene


class TermsScene(StatesGroup):
    terms_accept_waiting = State()

WELCOME_TEXT = """
–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ –∏–¥–µ–∞–ª—å–Ω—ã–ºüöÄ

–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞ –±–∞–∑–µ –ò–ò –¥–∞—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–æ–∫–∞—á–∞—Ç—å –µ–≥–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π.

–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º?
"""


start_router = Router(name="start")


CALLBACK_DATA = "accept_user_agreement"


def agreement_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ!", callback_data=CALLBACK_DATA)
    ]])
    return kb

@start_router.message(CommandStart())
async def start(message: Message, state: FSMContext, settings: Settings):
    user = await UsersDAL.ensure_user_from_message(message)

    await MessagesDAL.insert(
        MessageModel(
            type=MessageType.COMMAND,
            message_id=message.message_id,
            text=message.text,
            chat_id=message.chat.id,
            user_id=message.from_user.id if message.from_user else "",
        )
    )

    if user.accepted_rules:
        await state.clear()
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analysis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—é–º–µ.")
        return

    await state.set_state(TermsScene.terms_accept_waiting)

    await message.answer(WELCOME_TEXT)
    time.sleep(2)

    parts = [
        "–î–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî –Ω–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–≤–æ–∏–º —Ä–µ–∑—é–º–µ, –Ω—É–∂–Ω–æ —Ç–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ë–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–∫–∞–∫.",
        ""
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {settings.user_agreement_url}",
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {settings.privacy_url}"
    ]
    await message.answer("\n\n".join(parts), reply_markup=agreement_keyboard())


@start_router.callback_query(TermsScene.terms_accept_waiting, F.data == CALLBACK_DATA)
async def accept(callback: CallbackQuery, state: FSMContext):
    user = await UsersDAL.get_user(callback.from_user.id)
    assert user is not None

    await MessagesDAL.insert(
        MessageModel(
            type=MessageType.CALLBACK,
            message_id=callback.message.message_id if callback.message else -1,
            text="",
            chat_id=callback.message.chat.id if callback.message else -1,
            user_id=user.tg_user_id,
            callback_data=callback.data,
        )
    )

    if user.accepted_rules:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥–µ /analysis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ.")
        await state.clear()
    else:
        await UsersDAL.accept_rules(user.tg_user_id)

        await callback.answer("–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

        await state.set_state(AnalysisScene.resume_waiting)
        await callback.message.answer(
            "–î–∞–≤–∞–π —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –∞–Ω–∞–ª–∏–∑ —Ä—é–∑–µ–º—É –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫—Ä—É—Ç–æ.\n"
            "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word, PDF –∏–ª–∏ TXT. (–≤—ã–≥–∑—É–∑–∫–∞ —Å HH —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥—ë—Ç)"
        )


@start_router.message(TermsScene.terms_accept_waiting)
async def block_everything_until_accept(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=agreement_keyboard(),
    )
